<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jam.client.member.dao.MemberDAO">

	<!-- 회원가입 -->
	<insert id="memberJoin" parameterType="member">
	INSERT INTO member (user_id, public_id, user_pw, user_name, phone, email, address)
	VALUES (
		#{user_id}, 
		SYS_GUID(),
		#{user_pw}, 
		#{user_name}, 
		#{phone}, 
		#{email},
		#{address}
	)
	</insert>
	
	<!-- 아이디 중복검사 -->
  	<select id="idCheck" resultType="int">
  		SELECT count(*) 
  		FROM member 
  		WHERE user_id = #{userId}
  	</select>
  	
  	<!-- 닉네임 중복검사 -->
  	<select id="nameCheck" resultType="int">
  		SELECT count(*) 
  		FROM member 
  		WHERE user_name = #{user_name}
  	</select>
  	
  	<!-- 전화번호 중복검사 -->
  	<select id="phoneCheck" resultType="int">
  		SELECT count(*) 
  		FROM member 
  		WHERE phone = #{phone}
  	</select>
  	
  	<!-- 이메일 중복검사 -->
  	<select id="emailCheck" resultType="int">
  		SELECT count(*)
  		FROM member
  		WHERE email = #{email}
  	</select>
  	
  	
  	<!-- 사용자 정보 확인 -->
  	<select id="findByUsername" resultType="member">
  		SELECT user_id, user_pw, user_name, address, phone, email, role
  		FROM member
  		WHERE user_id = #{user_id}
  	</select>
  	
  	<!-- 회원 닉네임 가져오기 -->
  	<select id="getUserName" resultType="String">
  		SELECT user_name
  		FROM member
  		WHERE user_id = #{user_id}
  	</select>
  	
  	<!-- 아이디 가져오기 -->
  	<select id="getUserId" resultType="String">
  		SELECT user_id
  		FROM member
  		WHERE user_name = #{user_nae}
  	</select>
  	
  	<!-- refresh 토큰 저장 -->
  	<update id="addRefreshToken" parameterType="String">
		UPDATE member
		SET refreshToken = #{refreshToken}
		WHERE user_id = #{user_id}
  	</update>
  	
  	<!-- refresh 토큰 삭제 -->
  	<update id="deleteRefreshToken" parameterType="String">
  		UPDATE member
		SET refreshToken = NULL
		WHERE user_id = #{user_id}
  	</update>
  	
  	<!-- refresh 토큰 가져오기 -->
  	<select id="getRefreshToken" parameterType="String" resultType="String">
  		SELECT refreshToken
  		FROM member
  		WHERE user_id = #{user_id}
  	</select>
	
	
	<!-- 마이페이지 - 회원 정보 페이지 -->
	<select id="account" resultType="member" parameterType="String">
		SELECT user_id, user_name, address, phone, social_login
		FROM member
		WHERE user_id = #{user_id}
	</select>
	
  	<!-- 아이디 찾기 -->
  	<select id="findId" parameterType="String" resultType="String">
  		SELECT user_id
  		FROM member
  		WHERE email = #{email}
  		AND phone = #{phone}
  	</select>
  	
  	<!-- 비밀번호 찾기 -->
	<select id="findPw" parameterType="String" resultType="int">
		SELECT count(*)
		FROM member
		WHERE user_id = #{user_id} 
		AND email = #{email} 
		AND phone = #{phone}
	</select>
	
	<!-- 비밀번호 변경 -->
	<update id="updatePw" parameterType="String">
		UPDATE member
		SET user_pw = #{user_pw}
		WHERE user_id = #{user_id}
	</update>
	
	<!-- 닉네임 변경 -->
	<update id="updateUserName" parameterType="member">
		UPDATE member
		SET user_name = #{user_name}
		WHERE user_id = #{user_id}
	</update>
	
	<!-- 전화번호 변경 -->
	<update id="updatePhone" parameterType="member">
		UPDATE member
		SET phone = #{phone}
		WHERE user_id = #{user_id}
	</update>
	
	<!-- 비밀번호 확인 -->
	<select id="pwConfirm" resultType="String" parameterType="member">
		SELECT user_pw
		FROM member
		WHERE user_id = #{user_id}
	</select>
	
	<!-- 주소 변경 -->
	<update id="updateAddress" parameterType="member">
		UPDATE member
		SET address = #{address}
		WHERE user_id = #{user_id}
	</update>
	
	<!-- 회원 탈퇴 -->
	<delete id="withDraw" parameterType="String">
		DELETE FROM member WHERE user_id = #{user_id}		
	</delete>
	
	
	<!-- 네이버 회원 정보 찾기 -->
	<select id="findSocialUser" parameterType="member" resultType="int">
		<![CDATA[
		select COUNT(*)
		from member 
		where user_id = #{user_id}
		]]>
	</select>
	
	<!-- 네이버 회원 정보 저장 -->
	<insert id="SocialRegister" parameterType="member">
		INSERT INTO member(user_id, user_name, user_pw, email, phone, role, social_login)
		VALUES (#{user_id}, #{user_name}, #{user_pw}, #{email}, #{phone},'MEMBER', 1)
	</insert>
	
	<!-- refresh token으로 회원 아이디, 닉네임, 권한 조회 -->
	<select id="getUserInfo" parameterType="String" resultType="member">
		SELECT user_id, user_name, role
		FROM member
		WHERE refreshToken = #{refreshToken}
	</select>
	
</mapper>