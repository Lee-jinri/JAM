<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jam.client.job.dao.JobDAO">
	
	<!-- 키워드 검색 -->
	<sql id="jobSearch">
		<if test="keyword != null and keyword != ''">
			<![CDATA[
			AND (
				LOWER(j.title) LIKE '%' || LOWER(#{keyword}) || '%' ESCAPE '\'
        		OR LOWER(j.content) LIKE '%' || LOWER(#{keyword}) || '%' ESCAPE '\'
			)
			]]>
		</if>
	</sql>
	
	<!-- 지역 검색 -->
	<sql id="jobLocalSearch">
		<if test="city != null and city != ''">
	        <![CDATA[AND j.city = #{city}]]>
	    </if>
	    <if test="gu != null and gu != ''">
	        <![CDATA[AND j.gu = #{gu}]]>
	    </if>
	    <if test="dong != null and dong != ''">
	        <![CDATA[AND j.dong = #{dong}]]>
	    </if>
	</sql>
	
	<sql id="jobPositionSearch">
	    <if test="positions != null and positions.size() > 0">
	        AND position IN 
	        <foreach collection="positions" item="pos" open="(" separator="," close=")">
	            #{pos}
	        </foreach>
	    </if>
	</sql>
	
	
	<!-- list -->
	<select id="getBoard" parameterType="job" resultType="job">
		<![CDATA[
		SELECT 
			post_id, title, 
			to_char(created_at, 'YYYY/MM/DD') AS created_at, 
			pay_category, pay, 
			city, gu, dong, position,
			0 AS isFavorite  
		FROM (
			SELECT /*+ INDEX_DESC(j IX_JOB_STATUS_CATEGORY_POSTID) */
				j.post_id, j.title, j.created_at, 
				j.pay_category, j.pay, 
				j.city, j.gu, j.dong, j.position,
				ROW_NUMBER() OVER (ORDER BY j.post_id DESC) AS rnum
			FROM job j
			]]>
			<where>
		        j.status = 0 AND j.category = #{category}
		        <include refid="jobSearch"/>
		        <include refid="jobLocalSearch"/>
		        <include refid="jobPositionSearch"/>
		    </where>
		) 
		<![CDATA[
		WHERE rnum > (#{pageNum} - 1) * #{amount} AND rnum <= #{pageNum} * #{amount}
		]]>
	</select>	
	
	<select id="getBoardWithFavorite" parameterType="job" resultType="job">
		<![CDATA[
		SELECT 
			j.post_id, j.title, 
			to_char(j.created_at, 'YYYY/MM/DD') AS created_at, 
			j.pay_category, j.pay, 
			j.city, j.gu, j.dong, j.position,
			CASE WHEN f.board_no IS NOT NULL THEN 1 ELSE 0 END AS isFavorite 
		FROM (
			SELECT /*+ INDEX_DESC(j IX_JOB_STATUS_CATEGORY_POSTID) */
				j.post_id, j.title, j.created_at, 
				j.pay_category, j.pay, 
				j.city, j.gu, j.dong, j.position,
				ROW_NUMBER() OVER (ORDER BY j.post_id DESC) AS rnum
			FROM job j
		]]>
			<where>
				j.status = 0 AND j.category = #{category}
				<include refid="jobSearch"/>
				<include refid="jobLocalSearch"/>
				<include refid="jobPositionSearch"/>
			</where>
		<![CDATA[
		) j 
		LEFT JOIN favorite f  
			ON j.post_id = f.board_no  
			AND f.board_type = 'job'  
			AND f.user_id = #{user_id, jdbcType=VARCHAR}
		WHERE rnum > (#{pageNum} - 1) * #{amount} 
		AND rnum <= #{pageNum} * #{amount}
		]]>
	</select>
	
	<select id="listCnt" parameterType="job" resultType="int">
	    SELECT count(*)
	    FROM job j
	    LEFT JOIN member m ON j.user_id = m.user_id
	    <where>
			1=1
			AND j.status = 0 AND j.category = #{category}
		    <include refid="jobSearch"/>
		    <include refid="jobLocalSearch"/>
		    <include refid="jobPositionSearch"/>
		</where>
	</select>
	
	<!-- 조회수 -->
	<update id="incrementReadCnt" parameterType="job">
		UPDATE job SET hits = hits + 1 where post_id = #{post_id}
	</update>
	
	<!-- 상세페이지 -->
	<select id="getPost" resultType="job">
		SELECT j.post_id, j.title, j.content, to_char(j.created_at,'YYYY/MM/DD HH24:MI:SS') as created_at, j.category, j.status,j.pay_category, pay, m.user_name, j.user_id, j.city, j.gu, j.dong, j.position
		FROM job j
		LEFT JOIN Member m ON j.user_id = m.user_id
		WHERE j.post_id = #{post_id}
	</select>
	
	<!-- 글 입력 -->
	<insert id="writePost" parameterType="job">
		<selectKey keyProperty="id" resultType="Long" order="BEFORE">
        	select job_seq.nextval from dual
    	</selectKey>
		INSERT INTO job(post_id, user_id, title, content, category, status,  pay_category, pay, position, hits, city, gu, dong)
		VALUES(#{post_id},#{user_id}, #{title}, #{content}, #{category},0,  #{pay_category, jdbcType=INTEGER}, #{pay, jdbcType=INTEGER}, #{position}, 0, #{city}, #{gu, jdbcType = VARCHAR}, #{dong, jdbcType = VARCHAR})
	</insert>
	
	<!-- 글 수정페이지 -->
	<select id="getPostById" parameterType="job"  resultType="job">
		SELECT post_id, title, content, status, pay_category, pay, position, city, gu, dong
		FROM job
		WHERE post_id = #{post_id} 
	</select>
	
	<!-- 글 수정 -->
	<update id="editPost" parameterType="job">
		UPDATE job SET
		title = #{title},
		content = #{content},
		status = #{status},
		category = #{category},
		pay_category = #{pay_category},
		pay = #{pay},
		position = #{position},
		city = #{city},
		gu = #{gu},
		dong = #{dong},
		created_at = sysdate
		
		WHERE post_id = #{post_id} AND user_id = #{user_id}
	</update>
	
	<!-- 글 삭제 -->
	<delete id="deletePost" parameterType="job">
		DELETE FROM job WHERE post_id = #{post_id} AND user_id = #{user_id}
	</delete>

	<!-- 특정 회원의  글 조회 --> 
	<select id="getPosts" resultType="job" parameterType="job">
		<![CDATA[
		SELECT post_id, title, to_char(created_at,'YYYY/MM/DD') as created_at, hits
		FROM (
				SELECT /*+ INDEX_DESC(JOB SYS_C0025522) */
					rownum as rnum, post_id, title, created_at
				FROM job j
				where ]]> 
				<trim prefix="(" suffix=") AND" prefixOverrides="AND">
					<include refid="jobSearch"></include> 
				</trim>
			<![CDATA[ rownum <= #{pageNum} * #{amount} AND user_id  = #{user_id} 
				) jobList
			WHERE rnum > (#{pageNum} - 1) * #{amount}
			]]>
	</select>
	
	<!-- 특정 회원의 레코드 수 조회 -->
	<select id="getUserPostCnt" parameterType="job" resultType="int">
	    SELECT count(*)
	    FROM job j
	    WHERE user_id = #{user_id}
	    <trim prefix="AND (" suffix=")" prefixOverrides="AND | OR">
	        <include refid="jobSearch"></include>
	    </trim>
	</select>
	
</mapper>